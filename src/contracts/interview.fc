const status::created = 1;
const status::paid = 2;
const status::canceled = 3;
const status::finished = 4;

const op::buy = 1;
const op::cancel = 2;

const error::invalid_interview_status = 701;
const error::insufficient_funds = 702;
const error::self_purchasing_not_allowed = 703;
const error::cancel_not_allowed = 704;
const error::cancel_time_has_passed = 705;

const SECONDS_IN_FIVE_MINUTES = 300;

(int, slice, slice, int, int, int) load_data() inline {
  var data_slice = get_data().begin_parse();

  return (
    data_slice~load_uint(64),
    data_slice~load_msg_addr(),
    data_slice~load_msg_addr(),
    data_slice~load_uint(32),
    data_slice~load_uint(32),
    data_slice~load_uint(2)
  );
}

() save_data(int price, slice creator_address, slice payer_address, int start_at, int end_at, int status) impure inline {
  set_data(begin_cell()
    .store_uint(price, 64)
    .store_slice(creator_address)
    .store_slice(payer_address)
    .store_uint(start_at, 32)
    .store_uint(end_at, 32)
    .store_uint(status, 2)
    .end_cell());
}

() buy(int msg_value, slice cs) impure inline {
  var sender = cs~load_msg_addr();

  var (price, creator_address, _, start_at, end_at, status) = load_data();

  throw_if(error::invalid_interview_status, status != status::created);
  throw_if(error::self_purchasing_not_allowed, equal_slice_bits(creator_address, sender));
  throw_if(error::insufficient_funds, msg_value < price);

  save_data(
    price,
    creator_address,
    sender,
    start_at,
    end_at,
    status::paid
  );
  
  if (msg_value > price) {
    var change = msg_value - price;
    
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(sender)
      .store_coins(change)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .end_cell();
    
    send_raw_message(msg, 1);
  }
}

() cancel(slice cs) impure inline {
  var sender = cs~load_msg_addr();

  var (price, creator_address, payer_address, start_at, end_at, status) = load_data();

  throw_unless(error::cancel_not_allowed, equal_slice_bits(creator_address, sender) | equal_slice_bits(payer_address, sender));
  throw_if(error::invalid_interview_status, status != status::paid);
  throw_if(error::cancel_time_has_passed, now() - start_at > SECONDS_IN_FIVE_MINUTES);

  save_data(
    price,
    creator_address,
    payer_address,
    start_at,
    end_at,
    status::canceled
  );

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(payer_address)
    .store_coins(price)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();

  send_raw_message(msg, 1);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  var cs = in_msg_full.begin_parse();
  cs~skip_bits(4);

  var op = in_msg_body~load_uint(32);

  if (op == op::buy) {
    buy(msg_value, cs);
  }

  if (op == op::cancel) {
    cancel(cs);
  }
}

(int, slice, slice, int, int, int) info() method_id {
  return load_data();
}